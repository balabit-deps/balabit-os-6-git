From 0e38d7c61074b86857548ae5aad1d4f0612766d8 Mon Sep 17 00:00:00 2001
From: Jonathan Nieder <jrnieder@gmail.com>
Date: Mon, 6 Jun 2011 04:39:29 -0500
Subject: daemon: move locate_host() to tcp.c

Keep the different name resolution functions close together so they
can learn from each other and perhaps share code in the future.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
---
 daemon.c | 117 +++------------------------------------------------------------
 tcp.c    |  98 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 tcp.h    |  15 ++++++++
 3 files changed, 118 insertions(+), 112 deletions(-)

diff --git a/daemon.c b/daemon.c
index a1e2e04..e431904 100644
--- a/daemon.c
+++ b/daemon.c
@@ -1,5 +1,6 @@
 #include "cache.h"
 #include "pkt-line.h"
+#include "tcp.h"
 #include "exec_cmd.h"
 #include "run-command.h"
 #include "strbuf.h"
@@ -53,26 +54,15 @@ static const char *user_path;
 static unsigned int timeout;
 static unsigned int init_timeout;
 
-struct hostinfo {
-	struct strbuf hostname;
-	struct strbuf canon_hostname;
-	struct strbuf ip_address;
-	struct strbuf tcp_port;
-	unsigned int hostname_lookup_done:1;
-	unsigned int saw_extended_args:1;
-};
-
-static void lookup_hostname(struct hostinfo *hi);
-
 static const char *get_canon_hostname(struct hostinfo *hi)
 {
-	lookup_hostname(hi);
+	git_lookup_hostname(hi);
 	return hi->canon_hostname.buf;
 }
 
 static const char *get_ip_address(struct hostinfo *hi)
 {
-	lookup_hostname(hi);
+	git_lookup_hostname(hi);
 	return hi->ip_address.buf;
 }
 
@@ -533,36 +523,6 @@ static void parse_host_and_port(char *hostport, char **host,
 }
 
 /*
- * Sanitize a string from the client so that it's OK to be inserted into a
- * filesystem path. Specifically, we disallow slashes, runs of "..", and
- * trailing and leading dots, which means that the client cannot escape
- * our base path via ".." traversal.
- */
-static void sanitize_client(struct strbuf *out, const char *in)
-{
-	for (; *in; in++) {
-		if (*in == '/')
-			continue;
-		if (*in == '.' && (!out->len || out->buf[out->len - 1] == '.'))
-			continue;
-		strbuf_addch(out, *in);
-	}
-
-	while (out->len && out->buf[out->len - 1] == '.')
-		strbuf_setlen(out, out->len - 1);
-}
-
-/*
- * Like sanitize_client, but we also perform any canonicalization
- * to make life easier on the admin.
- */
-static void canonicalize_client(struct strbuf *out, const char *in)
-{
-	sanitize_client(out, in);
-	strbuf_tolower(out);
-}
-
-/*
  * Read the host as supplied by the client connection.
  */
 static void parse_host_arg(struct hostinfo *hi, char *extra_args, int buflen)
@@ -582,8 +542,8 @@ static void parse_host_arg(struct hostinfo *hi, char *extra_args, int buflen)
 				char *port;
 				parse_host_and_port(val, &host, &port);
 				if (port)
-					sanitize_client(&hi->tcp_port, port);
-				canonicalize_client(&hi->hostname, host);
+					git_sanitize_client(&hi->tcp_port, port);
+				git_canonicalize_client(&hi->hostname, host);
 				hi->hostname_lookup_done = 0;
 			}
 
@@ -595,73 +555,6 @@ static void parse_host_arg(struct hostinfo *hi, char *extra_args, int buflen)
 	}
 }
 
-/*
- * Locate canonical hostname and its IP address.
- */
-#ifndef NO_IPV6
-
-static void lookup_hostname(struct hostinfo *hi)
-{
-	if (!hi->hostname_lookup_done && hi->hostname.len) {
-		struct addrinfo hints;
-		struct addrinfo *ai;
-		int gai;
-		static char addrbuf[HOST_NAME_MAX + 1];
-
-		memset(&hints, 0, sizeof(hints));
-		hints.ai_flags = AI_CANONNAME;
-
-		gai = getaddrinfo(hi->hostname.buf, NULL, &hints, &ai);
-		if (!gai) {
-			struct sockaddr_in *sin_addr = (void *)ai->ai_addr;
-
-			inet_ntop(AF_INET, &sin_addr->sin_addr,
-				  addrbuf, sizeof(addrbuf));
-			strbuf_addstr(&hi->ip_address, addrbuf);
-
-			if (ai->ai_canonname)
-				sanitize_client(&hi->canon_hostname,
-						ai->ai_canonname);
-			else
-				strbuf_addbuf(&hi->canon_hostname,
-					      &hi->ip_address);
-
-			freeaddrinfo(ai);
-		}
-		hi->hostname_lookup_done = 1;
-	}
-}
-
-#else
-
-static void lookup_hostname(struct hostinfo *hi)
-{
-	if (!hi->hostname_lookup_done && hi->hostname.len) {
-		struct hostent *hent;
-		struct sockaddr_in sa;
-		char **ap;
-		static char addrbuf[HOST_NAME_MAX + 1];
-
-		hent = gethostbyname(hi->hostname.buf);
-		if (hent) {
-			ap = hent->h_addr_list;
-			memset(&sa, 0, sizeof sa);
-			sa.sin_family = hent->h_addrtype;
-			sa.sin_port = htons(0);
-			memcpy(&sa.sin_addr, *ap, hent->h_length);
-
-			inet_ntop(hent->h_addrtype, &sa.sin_addr,
-				  addrbuf, sizeof(addrbuf));
-
-			sanitize_client(&hi->canon_hostname, hent->h_name);
-			strbuf_addstr(&hi->ip_address, addrbuf);
-		}
-		hi->hostname_lookup_done = 1;
-	}
-}
-
-#endif
-
 static void hostinfo_init(struct hostinfo *hi)
 {
 	memset(hi, 0, sizeof(*hi));
diff --git a/tcp.c b/tcp.c
index a4ece54..8579b2a 100644
--- a/tcp.c
+++ b/tcp.c
@@ -3,9 +3,43 @@
 #include "run-command.h"
 #include "connect.h"
 
+#ifndef HOST_NAME_MAX
+#define HOST_NAME_MAX 256
+#endif
+
 #define STR_(s)	# s
 #define STR(s)	STR_(s)
 
+/*
+ * Sanitize a string from the client so that it's OK to be inserted into a
+ * filesystem path. Specifically, we disallow slashes, runs of "..", and
+ * trailing and leading dots, which means that the client cannot escape
+ * our base path via ".." traversal.
+ */
+void git_sanitize_client(struct strbuf *out, const char *in)
+{
+	for (; *in; in++) {
+		if (*in == '/')
+			continue;
+		if (*in == '.' && (!out->len || out->buf[out->len - 1] == '.'))
+			continue;
+		strbuf_addch(out, *in);
+	}
+
+	while (out->len && out->buf[out->len - 1] == '.')
+		strbuf_setlen(out, out->len - 1);
+}
+
+/*
+ * Like sanitize_client, but we also perform any canonicalization
+ * to make life easier on the admin.
+ */
+void git_canonicalize_client(struct strbuf *out, const char *in)
+{
+	git_sanitize_client(out, in);
+	strbuf_tolower(out);
+}
+
 void get_host_and_port(char **host, const char **port)
 {
 	char *colon, *end;
@@ -44,6 +78,41 @@ static const char *ai_name(const struct addrinfo *ai)
 }
 
 /*
+ * Locate canonical hostname and its IP address.
+ */
+void git_lookup_hostname(struct hostinfo *hi)
+{
+	if (!hi->hostname_lookup_done && hi->hostname.len) {
+		struct addrinfo hints;
+		struct addrinfo *ai;
+		int gai;
+		static char addrbuf[HOST_NAME_MAX + 1];
+
+		memset(&hints, 0, sizeof(hints));
+		hints.ai_flags = AI_CANONNAME;
+
+		gai = getaddrinfo(hi->hostname.buf, NULL, &hints, &ai);
+		if (!gai) {
+			struct sockaddr_in *sin_addr = (void *)ai->ai_addr;
+
+			inet_ntop(AF_INET, &sin_addr->sin_addr,
+				  addrbuf, sizeof(addrbuf));
+			strbuf_addstr(&hi->ip_address, addrbuf);
+
+			if (ai->ai_canonname)
+				git_sanitize_client(&hi->canon_hostname,
+						ai->ai_canonname);
+			else
+				strbuf_addbuf(&hi->canon_hostname,
+					      &hi->ip_address);
+
+			freeaddrinfo(ai);
+		}
+		hi->hostname_lookup_done = 1;
+	}
+}
+
+/*
  * Returns a connected socket() fd, or else die()s.
  */
 static int git_tcp_connect_sock(char *host, int flags)
@@ -108,6 +177,35 @@ static int git_tcp_connect_sock(char *host, int flags)
 #else /* NO_IPV6 */
 
 /*
+ * Locate canonical hostname and its IP address.
+ */
+void git_lookup_hostname(struct hostinfo *hi)
+{
+	if (!hi->hostname_lookup_done && hi->hostname.len) {
+		struct hostent *hent;
+		struct sockaddr_in sa;
+		char **ap;
+		static char addrbuf[HOST_NAME_MAX + 1];
+
+		hent = gethostbyname(hi->hostname.buf);
+		if (hent) {
+			ap = hent->h_addr_list;
+			memset(&sa, 0, sizeof sa);
+			sa.sin_family = hent->h_addrtype;
+			sa.sin_port = htons(0);
+			memcpy(&sa.sin_addr, *ap, hent->h_length);
+
+			inet_ntop(hent->h_addrtype, &sa.sin_addr,
+				  addrbuf, sizeof(addrbuf));
+
+			git_sanitize_client(&hi->canon_hostname, hent->h_name);
+			strbuf_addstr(&hi->ip_address, addrbuf);
+		}
+		hi->hostname_lookup_done = 1;
+	}
+}
+
+/*
  * Returns a connected socket() fd, or else die()s.
  */
 static int git_tcp_connect_sock(char *host, int flags)
diff --git a/tcp.h b/tcp.h
index 566afd4..719d899 100644
--- a/tcp.h
+++ b/tcp.h
@@ -1,6 +1,21 @@
 #ifndef TCP_H
 #define TCP_H
 
+#include "strbuf.h"
+
+struct hostinfo {
+	struct strbuf hostname;
+	struct strbuf canon_hostname;
+	struct strbuf ip_address;
+	struct strbuf tcp_port;
+	unsigned int hostname_lookup_done:1;
+	unsigned int saw_extended_args:1;
+};
+
+extern void git_sanitize_client(struct strbuf *out, const char *in);
+extern void git_canonicalize_client(struct strbuf *out, const char *in);
+extern void git_lookup_hostname(struct hostinfo *hi);
+
 extern void get_host_and_port(char **host, const char **port);
 extern int git_use_proxy(const char *host);
 extern void git_tcp_connect(int fd[2], char *host, int flags);
-- 
2.4.3.573.g4eafbef

